Grading at Mon 11 Mar 2024 02:31:42 AM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==501== Memcheck, a memory error detector
==501== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==501== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==501== Command: ./tester hands.txt draw.txt
==501== Parent PID: 500
==501== 
==501== Invalid read of size 1
==501==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==501==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==501==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==501==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==501== 
==501== 
==501== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==501==  Access not within mapped region at address 0x1
==501==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==501==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==501==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==501==  If you believe this happened as a result of a stack
==501==  overflow in your program's main thread (unlikely but
==501==  possible), you can try to increase the size of the
==501==  main thread stack using the --main-stacksize= flag.
==501==  The main thread stack size used in this run was 8388608.
==501== 
==501== HEAP SUMMARY:
==501==     in use at exit: 728 bytes in 12 blocks
==501==   total heap usage: 19 allocs, 7 frees, 1,408 bytes allocated
==501== 
==501== LEAK SUMMARY:
==501==    definitely lost: 0 bytes in 0 blocks
==501==    indirectly lost: 0 bytes in 0 blocks
==501==      possibly lost: 0 bytes in 0 blocks
==501==    still reachable: 728 bytes in 12 blocks
==501==         suppressed: 0 bytes in 0 blocks
==501== Rerun with --leak-check=full to see details of leaked memory
==501== 
==501== For lists of detected and suppressed errors, rerun with: -s
==501== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==506== Memcheck, a memory error detector
==506== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==506== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==506== Command: ./tester hands.txt draw.txt
==506== Parent PID: 505
==506== 
==506== Invalid read of size 1
==506==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==506==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==506==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==506==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==506== 
==506== 
==506== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==506==  Access not within mapped region at address 0x1
==506==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==506==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==506==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==506==  If you believe this happened as a result of a stack
==506==  overflow in your program's main thread (unlikely but
==506==  possible), you can try to increase the size of the
==506==  main thread stack using the --main-stacksize= flag.
==506==  The main thread stack size used in this run was 8388608.
==506== 
==506== HEAP SUMMARY:
==506==     in use at exit: 728 bytes in 12 blocks
==506==   total heap usage: 19 allocs, 7 frees, 1,408 bytes allocated
==506== 
==506== LEAK SUMMARY:
==506==    definitely lost: 0 bytes in 0 blocks
==506==    indirectly lost: 0 bytes in 0 blocks
==506==      possibly lost: 0 bytes in 0 blocks
==506==    still reachable: 728 bytes in 12 blocks
==506==         suppressed: 0 bytes in 0 blocks
==506== Rerun with --leak-check=full to see details of leaked memory
==506== 
==506== For lists of detected and suppressed errors, rerun with: -s
==506== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==512== Memcheck, a memory error detector
==512== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==512== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==512== Command: ./tester h.txt d.txt
==512== Parent PID: 511
==512== 
==512== Invalid read of size 1
==512==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==512==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==512==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==512==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==512== 
==512== 
==512== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==512==  Access not within mapped region at address 0x1
==512==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==512==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==512==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==512==  If you believe this happened as a result of a stack
==512==  overflow in your program's main thread (unlikely but
==512==  possible), you can try to increase the size of the
==512==  main thread stack using the --main-stacksize= flag.
==512==  The main thread stack size used in this run was 8388608.
==512== 
==512== HEAP SUMMARY:
==512==     in use at exit: 752 bytes in 14 blocks
==512==   total heap usage: 21 allocs, 7 frees, 1,432 bytes allocated
==512== 
==512== LEAK SUMMARY:
==512==    definitely lost: 0 bytes in 0 blocks
==512==    indirectly lost: 0 bytes in 0 blocks
==512==      possibly lost: 0 bytes in 0 blocks
==512==    still reachable: 752 bytes in 14 blocks
==512==         suppressed: 0 bytes in 0 blocks
==512== Rerun with --leak-check=full to see details of leaked memory
==512== 
==512== For lists of detected and suppressed errors, rerun with: -s
==512== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==518== Memcheck, a memory error detector
==518== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==518== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==518== Command: ./tester i1 i2
==518== Parent PID: 517
==518== 
==518== Invalid read of size 1
==518==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==518==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==518== 
==518== 
==518== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==518==  Access not within mapped region at address 0x1
==518==    at 0x10946A: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x109569: read_input (in /graderhome/work/c4prj2_input/tester)
==518==    by 0x10A5E0: main (in /graderhome/work/c4prj2_input/tester)
==518==  If you believe this happened as a result of a stack
==518==  overflow in your program's main thread (unlikely but
==518==  possible), you can try to increase the size of the
==518==  main thread stack using the --main-stacksize= flag.
==518==  The main thread stack size used in this run was 8388608.
==518== 
==518== HEAP SUMMARY:
==518==     in use at exit: 824 bytes in 17 blocks
==518==   total heap usage: 27 allocs, 10 frees, 1,600 bytes allocated
==518== 
==518== LEAK SUMMARY:
==518==    definitely lost: 0 bytes in 0 blocks
==518==    indirectly lost: 0 bytes in 0 blocks
==518==      possibly lost: 0 bytes in 0 blocks
==518==    still reachable: 824 bytes in 17 blocks
==518==         suppressed: 0 bytes in 0 blocks
==518== Rerun with --leak-check=full to see details of leaked memory
==518== 
==518== For lists of detected and suppressed errors, rerun with: -s
==518== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
