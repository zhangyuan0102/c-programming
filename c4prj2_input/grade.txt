Grading at Mon 11 Mar 2024 03:07:17 AM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==860== Memcheck, a memory error detector
==860== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==860== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==860== Command: ./tester hands.txt draw.txt
==860== Parent PID: 859
==860== 
==860== Invalid read of size 8
==860==    at 0x10A72E: main (in /graderhome/work/c4prj2_input/tester)
==860==  Address 0x4a45568 is 0 bytes after a block of size 8 alloc'd
==860==    at 0x483B723: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==860==    by 0x483E017: realloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==860==    by 0x10955A: read_input (in /graderhome/work/c4prj2_input/tester)
==860==    by 0x10A615: main (in /graderhome/work/c4prj2_input/tester)
==860== 
==860== Invalid read of size 8
==860==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==860==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==860==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==860== 
==860== 
==860== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==860==  Access not within mapped region at address 0x8
==860==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==860==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==860==  If you believe this happened as a result of a stack
==860==  overflow in your program's main thread (unlikely but
==860==  possible), you can try to increase the size of the
==860==  main thread stack using the --main-stacksize= flag.
==860==  The main thread stack size used in this run was 8388608.
==860== 
==860== HEAP SUMMARY:
==860==     in use at exit: 176 bytes in 14 blocks
==860==   total heap usage: 27 allocs, 13 frees, 10,744 bytes allocated
==860== 
==860== LEAK SUMMARY:
==860==    definitely lost: 0 bytes in 0 blocks
==860==    indirectly lost: 0 bytes in 0 blocks
==860==      possibly lost: 0 bytes in 0 blocks
==860==    still reachable: 176 bytes in 14 blocks
==860==         suppressed: 0 bytes in 0 blocks
==860== Rerun with --leak-check=full to see details of leaked memory
==860== 
==860== For lists of detected and suppressed errors, rerun with: -s
==860== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==865== Memcheck, a memory error detector
==865== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==865== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==865== Command: ./tester hands.txt draw.txt
==865== Parent PID: 864
==865== 
==865== Use of uninitialised value of size 8
==865==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==865==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==865== 
==865== Invalid read of size 8
==865==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==865==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==865==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==865== 
==865== 
==865== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==865==  Access not within mapped region at address 0x8
==865==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==865==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==865==  If you believe this happened as a result of a stack
==865==  overflow in your program's main thread (unlikely but
==865==  possible), you can try to increase the size of the
==865==  main thread stack using the --main-stacksize= flag.
==865==  The main thread stack size used in this run was 8388608.
==865== 
==865== HEAP SUMMARY:
==865==     in use at exit: 608 bytes in 41 blocks
==865==   total heap usage: 75 allocs, 34 frees, 4,072 bytes allocated
==865== 
==865== LEAK SUMMARY:
==865==    definitely lost: 0 bytes in 0 blocks
==865==    indirectly lost: 0 bytes in 0 blocks
==865==      possibly lost: 0 bytes in 0 blocks
==865==    still reachable: 608 bytes in 41 blocks
==865==         suppressed: 0 bytes in 0 blocks
==865== Rerun with --leak-check=full to see details of leaked memory
==865== 
==865== Use --track-origins=yes to see where uninitialised values come from
==865== For lists of detected and suppressed errors, rerun with: -s
==865== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==871== Memcheck, a memory error detector
==871== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==871== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==871== Command: ./tester h.txt d.txt
==871== Parent PID: 870
==871== 
==871== Use of uninitialised value of size 8
==871==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==871==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==871== 
==871== Invalid read of size 8
==871==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==871==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==871==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==871== 
==871== 
==871== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==871==  Access not within mapped region at address 0x8
==871==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==871==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==871==  If you believe this happened as a result of a stack
==871==  overflow in your program's main thread (unlikely but
==871==  possible), you can try to increase the size of the
==871==  main thread stack using the --main-stacksize= flag.
==871==  The main thread stack size used in this run was 8388608.
==871== 
==871== HEAP SUMMARY:
==871==     in use at exit: 1,016 bytes in 67 blocks
==871==   total heap usage: 119 allocs, 52 frees, 4,816 bytes allocated
==871== 
==871== LEAK SUMMARY:
==871==    definitely lost: 0 bytes in 0 blocks
==871==    indirectly lost: 0 bytes in 0 blocks
==871==      possibly lost: 0 bytes in 0 blocks
==871==    still reachable: 1,016 bytes in 67 blocks
==871==         suppressed: 0 bytes in 0 blocks
==871== Rerun with --leak-check=full to see details of leaked memory
==871== 
==871== Use --track-origins=yes to see where uninitialised values come from
==871== For lists of detected and suppressed errors, rerun with: -s
==871== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==877== Memcheck, a memory error detector
==877== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==877== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==877== Command: ./tester i1 i2
==877== Parent PID: 876
==877== 
==877== Use of uninitialised value of size 8
==877==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==877==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==877== 
==877== Invalid read of size 8
==877==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==877==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==877==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==877== 
==877== 
==877== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==877==  Access not within mapped region at address 0x8
==877==    at 0x109886: print_hand (in /graderhome/work/c4prj2_input/tester)
==877==    by 0x10A738: main (in /graderhome/work/c4prj2_input/tester)
==877==  If you believe this happened as a result of a stack
==877==  overflow in your program's main thread (unlikely but
==877==  possible), you can try to increase the size of the
==877==  main thread stack using the --main-stacksize= flag.
==877==  The main thread stack size used in this run was 8388608.
==877== 
==877== HEAP SUMMARY:
==877==     in use at exit: 2,576 bytes in 153 blocks
==877==   total heap usage: 300 allocs, 147 frees, 11,096 bytes allocated
==877== 
==877== LEAK SUMMARY:
==877==    definitely lost: 0 bytes in 0 blocks
==877==    indirectly lost: 0 bytes in 0 blocks
==877==      possibly lost: 0 bytes in 0 blocks
==877==    still reachable: 2,576 bytes in 153 blocks
==877==         suppressed: 0 bytes in 0 blocks
==877== Rerun with --leak-check=full to see details of leaked memory
==877== 
==877== Use --track-origins=yes to see where uninitialised values come from
==877== For lists of detected and suppressed errors, rerun with: -s
==877== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
